# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random th variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

ZSH_THEME="powerlevel10k/powerlevel10k"
# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git z zsh-autosuggestions dirhistory)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh

#RPROMPT='%{%f%b%k%}$(build_prompt)'
# PROMPT='%{%F{blue}%}macos%{%F{reset}%}# '
#RPROMPT='%(?:%{%}%1{➜%} :%{%}%1{➜%} ) %{%}%c%{%} $(git_prompt_info)'
# Enhanced RPROMPT with conditional symbols and colors
# RPROMPT='$(git_prompt_info) %{%F{blue}%}%c%{%F{reset}%} %(?:%{%F{green}%}✔%{%F{reset}%} :%{%F{red}%}✖%{%F{reset}%})'


alias em="emacsclient -nw"
alias ee="emacsclient -n"
alias ec="emacsclient -cn"
alias d="emacsclient -q --no-wait"
alias doom="~/.config/emacs/bin/doom"
source <(fzf --zsh)
export PATH="/Users/guoshengwei/.cargo/bin:$PATH"


vterm_printf() {
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}
vterm_prompt_end() {
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
}
if [[ "$INSIDE_EMACS" = 'vterm' ]] \
       && [[ -n ${EMACS_VTERM_PATH} ]] \
       && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
    echo "Inside Emacs vterm"
	  #source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
fi
if [[ -n "$INSIDE_EMACS" ]]; then
    echo "Inside Emacs vterm"
    setopt PROMPT_SUBST
    PROMPT="${PROMPT}%{$(vterm_prompt_end)%}"
fi



export PATH="/opt/homebrew/opt/libgit2@1.7/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/libgit2@1.7/lib"
export CPPFLAGS="-I/opt/homebrew/opt/libgit2@1.7/include"

export LDFLAGS="-L/opt/homebrew/Cellar/taglib/1.13.1/lib"
export CPPFLAGS="-I/opt/homebrew/Cellar/taglib/1.13.1/include/"

export DISPLAY=:0

alias k="kubectl"


eval $(ssh-agent -s)
ssh-add ~/.ssh/github

export KUBECONFIG=$HOME/.kube/cluster/self-website-k8s.conf:$HOME/.kube/config:$HOME/.kube/cluster/csit-www.conf:$HOME/.kube/cluster/newbie.conf:$HOME/.kube/cluster/csit-system.conf


source <(kubectl completion zsh)


alias gasm="java -jar /Users/guoshengwei/Desktop/NYCU/computer\ architecture/rars/rars.jar"
alias asm="java -jar /Users/guoshengwei/Desktop/NYCU/computer\ architecture/rars/rars.jar nc p"


# export CC=/opt/homebrew/opt/llvm/bin/clang
# export CXX=/opt/homebrew/opt/llvm/bin/clang++
# export SDKROOT=$(xcrun --show-sdk-path)
# export CXXFLAGS="-I/opt/homebrew/opt/llvm/include/c++/v1 -I/opt/homebrew/opt/llvm/include -I$SDKROOT/usr/include"
# export LDFLAGS="-L/opt/homebrew/opt/llvm/lib -lc++ -lc++abi -lm"

export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
export PATH=/opt/riscv/bin:$PATH
export LIBGS="/Users/guoshengwei/lib/libgs.dylib"
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/Users/guoshengwei/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/Users/guoshengwei/miniconda3/etc/profile.d/conda.sh" ]; then
#         . "/Users/guoshengwei/miniconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/Users/guoshengwei/miniconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda initialize <<<

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


bindkey "^[B" dirhistory_zle_dirhistory_back
bindkey "^[b" backward-word
bindkey "^[F" dirhistory_zle_dirhistory_future
bindkey "^[f" forward-word


## export NVM_DIR="$HOME/.nvm"
## [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
## [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
export PATH="$HOME/.elan/bin:$PATH"
alias math="/Applications/Wolfram.app/Contents/MacOS/MathKernel"
